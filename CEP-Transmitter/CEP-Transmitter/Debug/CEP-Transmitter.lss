
CEP-Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c0  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c6  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000312  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c4  00000000  00000000  00001816  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000018da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	a1 30       	cpi	r26, 0x01	; 1
  88:	b2 07       	cpc	r27, r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  90:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <keypad_init>:
}


void keypad_init(void)
{
	DDRB |= (1 << PB1);  // set port B bit 1 as output for OE' of keypad decoder IC
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	87 bb       	out	0x17, r24	; 23
	DDRC &= ~(1 << PC0);  // set port C bit 0 as output for DA (data available) of keypad decoder IC
  9e:	84 b3       	in	r24, 0x14	; 20
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	84 bb       	out	0x14, r24	; 20
	DDRD |= 0xF0;  // set bits 0 to 3 of port D as input for keypad decoder IC ABCD
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	80 6f       	ori	r24, 0xF0	; 240
  a8:	81 bb       	out	0x11, r24	; 17
  aa:	08 95       	ret

000000ac <USART1_init>:
}


void USART1_init(void)
{
	DDRB |= (1<<PB3);  // set port B bit 3 as output for TXD1 of USART1
  ac:	87 b3       	in	r24, 0x17	; 23
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB2);  // set port B bit 2 as input for RXD1 of USART1
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB2);  // set port B bit 2 as high for RXD1 of USART1 (pull-up)
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	88 bb       	out	0x18, r24	; 24
	// int UBBRValue=25;
	UBRR1H=0x00;  // set baud rate
  be:	1c be       	out	0x3c, r1	; 60
	UBRR1L=0x05;  // set baud rate
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	80 b9       	out	0x00, r24	; 0
	UCSR1C |= (1 << USBS1) | (3 << UCSZ10);  // 2-bit Stop Bits, 8-bit character size
  c4:	8c b7       	in	r24, 0x3c	; 60
  c6:	8e 60       	ori	r24, 0x0E	; 14
  c8:	8c bf       	out	0x3c, r24	; 60
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);  // enable recieving and transmition 
  ca:	81 b1       	in	r24, 0x01	; 1
  cc:	88 61       	ori	r24, 0x18	; 24
  ce:	81 b9       	out	0x01, r24	; 1
  d0:	08 95       	ret

000000d2 <main>:


int main(void)
{
	// initializations
	USART1_init();  // initialize USART1
  d2:	0e 94 56 00 	call	0xac	; 0xac <USART1_init>
	// set_USART1_mode(transmitter);  // set USART1 to transmitter mode
	keypad_init();  // initialize keypad
  d6:	0e 94 4c 00 	call	0x98	; 0x98 <keypad_init>

	DDRC = 0xFF; // set port C as output
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	84 bb       	out	0x14, r24	; 20
	char receiveData;

	while (1)
	{
		switch (CURRENT_STATE)
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	88 23       	and	r24, r24
  e4:	19 f0       	breq	.+6      	; 0xec <main+0x1a>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	99 f0       	breq	.+38     	; 0x110 <main+0x3e>
  ea:	f9 cf       	rjmp	.-14     	; 0xde <main+0xc>
		{
			case entering_password:
				PORTC = 0x00;
  ec:	15 ba       	out	0x15, r1	; 21
				char y=0b10101010;
				{
					while(!(UCSR1A&(1<<UDRE1)));
  ee:	15 9b       	sbis	0x02, 5	; 2
  f0:	fe cf       	rjmp	.-4      	; 0xee <main+0x1c>
					UDR1 = y;
  f2:	8a ea       	ldi	r24, 0xAA	; 170
  f4:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	2f e3       	ldi	r18, 0x3F	; 63
  f8:	8d e0       	ldi	r24, 0x0D	; 13
  fa:	93 e0       	ldi	r25, 0x03	; 3
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x2a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x34>
 106:	00 00       	nop
					_delay_ms(1000);
				}
				CURRENT_STATE = checking_password;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 10e:	e7 cf       	rjmp	.-50     	; 0xde <main+0xc>
			case checking_password:
				receiveData=0;
				while(!(UCSR1A&(1<<RXC1)));
 110:	17 9b       	sbis	0x02, 7	; 2
 112:	fe cf       	rjmp	.-4      	; 0x110 <main+0x3e>
				receiveData=UDR1;
 114:	83 b1       	in	r24, 0x03	; 3
				PORTC=receiveData;
 116:	85 bb       	out	0x15, r24	; 21
 118:	2f e3       	ldi	r18, 0x3F	; 63
 11a:	8d e0       	ldi	r24, 0x0D	; 13
 11c:	93 e0       	ldi	r25, 0x03	; 3
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x4c>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x56>
 128:	00 00       	nop
				_delay_ms(1000);
				CURRENT_STATE = entering_password;
 12a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 12e:	d7 cf       	rjmp	.-82     	; 0xde <main+0xc>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
