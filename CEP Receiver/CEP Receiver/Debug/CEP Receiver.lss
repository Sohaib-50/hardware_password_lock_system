
CEP Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c0  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c6  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000312  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  6c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e3       	ldi	r30, 0x3A	; 58
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 30       	cpi	r26, 0x02	; 2
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>
  92:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  96:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <keypad_init>:
}


void keypad_init(void)
{
	DDRB |= (1 << PB1);  // set port B bit 1 as output for OE' of keypad decoder IC
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	87 bb       	out	0x17, r24	; 23
	DDRC &= ~(1 << PC0);  // set port C bit 0 as output for DA (data available) of keypad decoder IC
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	8e 7f       	andi	r24, 0xFE	; 254
  a8:	84 bb       	out	0x14, r24	; 20
	DDRD |= 0xF0;  // set bits 0 to 3 of port D as input for keypad decoder IC ABCD
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	80 6f       	ori	r24, 0xF0	; 240
  ae:	81 bb       	out	0x11, r24	; 17
  b0:	08 95       	ret

000000b2 <USART1_init>:
}


void USART1_init(void)
{
	DDRB |= (1<<PB3);  // set port B bit 3 as output for TXD1 of USART1
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB2);  // set port B bit 2 as input for RXD1 of USART1
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	8b 7f       	andi	r24, 0xFB	; 251
  bc:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB2);  // set port B bit 2 as high for RXD1 of USART1 (pull-up)
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	88 bb       	out	0x18, r24	; 24
	// int UBBRValue=25;
	UBRR1H=0x00;  // set baud rate
  c4:	1c be       	out	0x3c, r1	; 60
	UBRR1L=0x05;  // set baud rate
  c6:	85 e0       	ldi	r24, 0x05	; 5
  c8:	80 b9       	out	0x00, r24	; 0
	UCSR1C |= (1 << USBS1) | (3 << UCSZ10);  // 2-bit Stop Bits, 8-bit character size
  ca:	8c b7       	in	r24, 0x3c	; 60
  cc:	8e 60       	ori	r24, 0x0E	; 14
  ce:	8c bf       	out	0x3c, r24	; 60
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);  // enable receiving and transmitting
  d0:	81 b1       	in	r24, 0x01	; 1
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	81 b9       	out	0x01, r24	; 1
  d6:	08 95       	ret

000000d8 <main>:


int main(void)
{
	// initializations
	USART1_init();  // initialize USART1
  d8:	0e 94 59 00 	call	0xb2	; 0xb2 <USART1_init>
	// set_USART1_mode(transmitter);  // set USART1 to transmitter mode
	keypad_init();  // initialize keypad
  dc:	0e 94 4f 00 	call	0x9e	; 0x9e <keypad_init>

	DDRC = 0xFF; // set port C as output
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 bb       	out	0x14, r24	; 20
	char receiveData;

	while (1)
	{
		switch (CURRENT_STATE)
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	88 23       	and	r24, r24
  ea:	19 f0       	breq	.+6      	; 0xf2 <main+0x1a>
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	99 f0       	breq	.+38     	; 0x116 <main+0x3e>
  f0:	f9 cf       	rjmp	.-14     	; 0xe4 <main+0xc>
		{
			case entering_password:
				PORTC = 0x00;
  f2:	15 ba       	out	0x15, r1	; 21
				char y=0b10101010;
				{
					while(!(UCSR1A&(1<<UDRE1)));
  f4:	15 9b       	sbis	0x02, 5	; 2
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <main+0x1c>
					UDR1 = y;
  f8:	8a ea       	ldi	r24, 0xAA	; 170
  fa:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f e3       	ldi	r18, 0x3F	; 63
  fe:	8d e0       	ldi	r24, 0x0D	; 13
 100:	93 e0       	ldi	r25, 0x03	; 3
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x2a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x34>
 10c:	00 00       	nop
					_delay_ms(1000);
				}
				CURRENT_STATE = checking_password;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 114:	e7 cf       	rjmp	.-50     	; 0xe4 <main+0xc>
			case checking_password:
				receiveData=0;
				while(!(UCSR1A&(1<<RXC1)));
 116:	17 9b       	sbis	0x02, 7	; 2
 118:	fe cf       	rjmp	.-4      	; 0x116 <main+0x3e>
				receiveData=UDR1;
 11a:	83 b1       	in	r24, 0x03	; 3
				PORTC=receiveData;
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	2f e3       	ldi	r18, 0x3F	; 63
 120:	8d e0       	ldi	r24, 0x0D	; 13
 122:	93 e0       	ldi	r25, 0x03	; 3
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x4c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x56>
 12e:	00 00       	nop
				_delay_ms(1000);
				CURRENT_STATE = entering_password;
 130:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				break;
 134:	d7 cf       	rjmp	.-82     	; 0xe4 <main+0xc>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
